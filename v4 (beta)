(function () {
  if (window.createWindow) return;

  function makeDraggable(e) {
    let t = false, n = [0, 0];
    e.addEventListener("mousedown", function (o) {
      const r = o.target.tagName.toLowerCase();
      if ("nodrag" === o.target.className || ["input", "textarea", "select"].includes(r)) return;
      t = true;
      n = [e.offsetLeft - o.clientX, e.offsetTop - o.clientY];
      e.style.cursor = "grabbing";
    });
    document.addEventListener("mouseup", () => {
      t = false;
      e.style.cursor = "default";
    });
    document.addEventListener("mousemove", function (o) {
      if (t) {
        o.preventDefault();
        e.style.left = o.clientX + n[0] + "px";
        e.style.top = o.clientY + n[1] + "px";
      }
    });
  }

  window.createWindow = function (titleText, draggable = true) {
    const win = document.createElement("div");
    Object.assign(win.style, {
      position: "fixed",
      top: "50%",
      left: "50%",
      transform: "translate(-50%, -50%)",
      background: "#1e1e1e",
      color: "white",
      padding: "0",
      borderRadius: "12px",
      boxShadow: "0 0 20px rgba(0,0,0,0.7)",
      zIndex: "9999",
      fontFamily: "sans-serif",
      width: "400px",
      minHeight: "300px",
      overflow: "hidden"
    });

    const title = document.createElement("div");
    title.textContent = titleText;
    title.className = "nodrag";
    Object.assign(title.style, {
      background: "#111",
      fontSize: "18px",
      fontWeight: "bold",
      padding: "10px",
      textAlign: "center",
      borderBottom: "1px solid #333"
    });

    const close = document.createElement("div");
    close.textContent = "Ã—";
    close.className = "nodrag";
    Object.assign(close.style, {
      position: "absolute",
      top: "10px",
      right: "15px",
      cursor: "pointer",
      color: "#aaa",
      fontSize: "20px",
      fontWeight: "bold"
    });
    close.onmouseover = () => close.style.color = "red";
    close.onmouseout = () => close.style.color = "#aaa";
    close.onclick = () => win.remove();

    const tabBar = document.createElement("div");
    Object.assign(tabBar.style, {
      display: "flex",
      borderBottom: "1px solid #444",
      background: "#222"
    });

    const contentWrapper = document.createElement("div");
    Object.assign(contentWrapper.style, {
      padding: "15px"
    });

    win.appendChild(title);
    win.appendChild(close);
    win.appendChild(tabBar);
    win.appendChild(contentWrapper);
    document.body.appendChild(win);
    if (draggable) makeDraggable(win);

    const tabs = [];

    win.createTab = function (name) {
      const tabButton = document.createElement("div");
      tabButton.textContent = name;
      Object.assign(tabButton.style, {
        padding: "10px",
        cursor: "pointer",
        background: "#222",
        borderRight: "1px solid #333",
        flex: "1",
        textAlign: "center"
      });

      const tabContent = document.createElement("div");
      tabContent.style.display = "none";
      contentWrapper.appendChild(tabContent);

      tabButton.onclick = () => {
        tabs.forEach(tab => {
          tab.button.style.background = "#222";
          tab.content.style.display = "none";
        });
        tabButton.style.background = "#333";
        tabContent.style.display = "block";
      };

      tabBar.appendChild(tabButton);
      tabs.push({ button: tabButton, content: tabContent });

      if (tabs.length === 1) tabButton.click();

      return tabContent;
    };

    return win;
  };

  // GUI element helpers
  HTMLElement.prototype.AddLabel = function (text, size = "14px") {
    const label = document.createElement("div");
    label.textContent = text;
    label.style.fontSize = size;
    label.style.margin = "6px 0";
    this.appendChild(label);
    return label;
  };

  HTMLElement.prototype.AddInput = function (options) {
    const label = document.createElement("label");
    label.textContent = options.Name + ":";
    label.style.display = "block";

    const input = document.createElement("input");
    input.type = "text";
    input.placeholder = options.placeholder || "";
    Object.assign(input.style, {
      width: "100%",
      marginTop: "4px",
      padding: "4px",
      borderRadius: "4px",
      border: "none"
    });

    function confirmValue() {
      if (options.Callback) options.Callback(input.value);
    }

    if (options.ConfirmButton) {
      const button = document.createElement("button");
      button.textContent = "OK";
      button.style.marginTop = "4px";
      button.style.width = "100%";
      button.onclick = confirmValue;
      label.appendChild(input);
      label.appendChild(button);
    } else {
      input.addEventListener("keydown", ev => {
        if (ev.key === "Enter") confirmValue();
      });
      input.addEventListener("blur", confirmValue);
      label.appendChild(input);
    }

    this.appendChild(label);
    return input;
  };

  HTMLElement.prototype.AddCheckbox = function (options) {
    const label = document.createElement("label");
    label.style.display = "block";
    label.style.marginTop = "10px";

    const checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.checked = !!options.Default;
    checkbox.style.marginRight = "8px";
    checkbox.onchange = () => {
      if (options.Callback) options.Callback(checkbox.checked);
    };

    label.appendChild(checkbox);
    label.appendChild(document.createTextNode(options.Name));
    this.appendChild(label);
    return checkbox;
  };

  HTMLElement.prototype.AddButton = function (options) {
    const button = document.createElement("button");
    button.textContent = options.Name;
    Object.assign(button.style, {
      display: "block",
      marginTop: "6px",
      padding: "6px 12px",
      color: "white",
      background: "#333",
      border: "none",
      cursor: "pointer",
      width: "100%",
      textAlign: "left",
      borderRadius: "4px"
    });
    button.onclick = options.Callback;
    this.appendChild(button);
    return button;
  };

  HTMLElement.prototype.AddSlider = function (options) {
    const label = document.createElement("label");
    label.textContent = options.Name + ": ";
    label.style.display = "block";

    const valueSpan = document.createElement("span");
    valueSpan.textContent = options.Min;
    label.appendChild(valueSpan);

    const slider = document.createElement("input");
    slider.type = "range";
    slider.min = options.Min;
    slider.max = options.Max;
    slider.value = options.Min;
    slider.style.width = "100%";

    slider.oninput = () => {
      valueSpan.textContent = slider.value;
      if (!options.ConfirmButton && options.Callback) {
        options.Callback(Number(slider.value));
      }
    };

    this.appendChild(label);
    this.appendChild(slider);

    if (options.ConfirmButton) {
      const button = document.createElement("button");
      button.textContent = "OK";
      button.style.marginTop = "4px";
      button.style.width = "100%";
      button.onclick = () => options.Callback && options.Callback(Number(slider.value));
      this.appendChild(button);
    }

    return slider;
  };

  HTMLElement.prototype.AddLine = function () {
    const spacer = document.createElement("div");
    spacer.style.height = "20px";
    this.appendChild(spacer);
    return spacer;
  };
})();
